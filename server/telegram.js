// telegram.js
import TelegramBot from "node-telegram-bot-api";
import pg from "pg";

const { Pool } = pg;

// --- DB
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_SSL ? { rejectUnauthorized: false } : false,
});

async function findGuideByTelegramId(telegramId) {
  const r = await pool.query(
    `SELECT id, name, is_active, subscription_until
       FROM guides
      WHERE telegram_id = $1
      LIMIT 1`,
    [telegramId]
  );
  return r.rows[0] || null;
}

const token = process.env.TELEGRAM_BOT_TOKEN || '8314275448:AAG6bC-5ms-EsOZyaQ2LozKoyQkSS5gOQhs';
export const bot = new TelegramBot(token, { polling: false });

// --- –∑–∞–ø—É—Å–∫: webhook –≤ –ø—Ä–æ–¥–µ, polling –≤ –¥–µ–≤–µ
(async () => {
  try {
    const useWebhook = process.env.USE_WEBHOOK === "true";
    if (useWebhook) {
      const baseUrl = process.env.BASE_URL;
      if (!baseUrl) throw new Error("BASE_URL is required when USE_WEBHOOK=true");
      const path = `/bot${token}`;
      const url = `${baseUrl}${path}`;
      // –í —Ç–≤–æ—ë–º Express-—Å–µ—Ä–≤–µ—Ä–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
      // app.post(path, (req, res) => { bot.processUpdate(req.body); res.sendStatus(200); });
      await bot.setWebHook(url, { drop_pending_updates: true });
      console.log("[bot] Webhook set:", url);
    } else {
      await bot.deleteWebHook({ drop_pending_updates: true });
      await bot.startPolling();
      console.log("[bot] Polling started");
    }
  } catch (e) {
    console.error("[bot] start error:", e);
  }
})();

// --- —É—Ç–∏–ª–∏—Ç—ã
function formatDateRu(d) {
  try {
    return new Date(d).toLocaleDateString("ru-RU", {
      year: "numeric", month: "long", day: "numeric",
    });
  } catch { return String(d); }
}

function hasActiveSubscription(guide) {
  const flag = !!guide.is_active;
  const until = guide.subscription_until ? new Date(guide.subscription_until) : null;
  const today = new Date();
  const dateOk = !until || until >= today;
  return flag && dateOk;
}

// --- —Å—Ü–µ–Ω–∞—Ä–∏–π
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  // 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≥–∏–¥–æ–≤.`);

  // 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–∏–¥–æ–º
  try {
    const guide = await findGuideByTelegramId(userId);

    if (!guide) {
      await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≥–∏–¥ :(`);
      return;
    }

    // –ù–∞—à–ª–∏ –≥–∏–¥–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${guide.name?.trim() || "–≥–∏–¥"}!`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_sub" }],
        ],
      },
    });
  } catch (e) {
    console.error("[/start] findGuide error:", e);
    await bot.sendMessage(chatId, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –ö–Ω–æ–ø–∫–∏
bot.on("callback_query", async (query) => {
  try {
    if (!query?.data) return;
    const chatId = query.message?.chat?.id;
    const userId = query.from?.id;
    await bot.answerCallbackQuery(query.id);

    if (query.data === "check_sub") {
      const guide = await findGuideByTelegramId(userId);

      if (!guide) {
        await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≥–∏–¥ :(`);
        return;
      }

      if (hasActiveSubscription(guide)) {
        const until = guide.subscription_until
          ? formatDateRu(guide.subscription_until)
          : "–±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è";

        await bot.sendMessage(
          chatId,
          `‚úÖ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${until}`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üì• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data: "view_requests" }],
              ],
            },
          }
        );
      } else {
        await bot.sendMessage(
          chatId,
          `‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.`
        );
      }
      return;
    }

    if (query.data === "view_requests") {
      const base = process.env.APP_BASE_URL || "https://newsproject-tnkc.onrender.com";
      const url = `${base}/guides/requests`;
      await bot.sendMessage(chatId, `–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫–∏: ${url}`);
      return;
    }
  } catch (e) {
    console.error("[callback_query] error:", e);
    const chatId = query?.message?.chat?.id;
    if (chatId) {
      await bot.sendMessage(chatId, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});
