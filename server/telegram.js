// telegram.js
import TelegramBot from "node-telegram-bot-api";
import pg from "pg";

const { Pool } = pg;

// --- DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_SSL ? { rejectUnauthorized: false } : false,
});

async function findGuideByTelegramId(telegramId) {
  const r = await pool.query(
    `SELECT id, name, is_active, subscription_until
       FROM guides
      WHERE telegram_id = $1
      LIMIT 1`,
    [telegramId]
  );
  return r.rows[0] || null;
}

const token =
  process.env.TELEGRAM_BOT_TOKEN ||
  '8314275448:AAG6bC-5ms-EsOZyaQ2LozKoyQkSS5gOQhs' ||
  "–¢–í–û–ô_–¢–û–ö–ï–ù";
export const bot = new TelegramBot(token, { polling: true });

// –£—Ç–∏–ª–∏—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (ru-RU)
function formatDateRu(d) {
  try {
    return new Date(d).toLocaleDateString("ru-RU", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  } catch {
    return String(d);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: –∏ —Ñ–ª–∞–≥, –∏ –¥–∞—Ç–∞
function hasActiveSubscription(guide) {
  const flag = !!guide.is_active;
  const until = guide.subscription_until ? new Date(guide.subscription_until) : null;
  const today = new Date();
  // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ —Ñ–ª–∞–≥ true –∏ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ (–∏–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ç–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–ª–∞–≥—É)
  const dateOk = !until || until >= today;
  return flag && dateOk;
}

// /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram ID"
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || "–¥—Ä—É–≥";

  await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ì–∏–¥–æ–≤.`);

  await bot.sendMessage(
    chatId,
    `–ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã –≥–∏–¥–æ–º?`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π Telegram ID", callback_data: "send_id" }],
        ],
      },
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async (query) => {
  try {
    if (!query?.data) return;

    const chatId = query.message?.chat?.id;
    const userId = query.from?.id; // telegram_id
    const data = query.data;

    // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    await bot.answerCallbackQuery(query.id);

    if (data === "send_id") {
      // 1) –∏—â–µ–º –≥–∏–¥–∞ –≤ –ë–î –ø–æ telegram_id
      const guide = await findGuideByTelegramId(userId);

      if (!guide) {
        await bot.sendMessage(
          chatId,
          `‚ùå –ì–∏–¥ —Å –≤–∞—à–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ï—Å–ª–∏ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`
        );
        return;
      }

      // 2) –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–º–µ–Ω–∏
      const name = guide.name?.trim();
      await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${name || "–≥–∏–¥"}!`);

      // 3) —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      if (hasActiveSubscription(guide)) {
        const until = guide.subscription_until
          ? formatDateRu(guide.subscription_until)
          : "–±–µ–∑ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è";

        await bot.sendMessage(
          chatId,
          `‚úÖ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${until}`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üì• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data: "view_requests" }],
              ],
            },
          }
        );
      } else {
        await bot.sendMessage(
          chatId,
          `‚ö†Ô∏è –£–ø—Å, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø.`
        );
      }
      return;
    }

    if (data === "view_requests") {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞—è–≤–∫–∞–º–∏ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –ë–î.
      // –ü–æ–∫–∞ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –≤ –≤–∞—à—É –∞–¥–º–∏–Ω–∫—É/–≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ URL):
      const base = process.env.APP_BASE_URL || "https://newsproject-tnkc.onrender.com";
      const url = `${base}/guides/requests`; // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–¥–µ–ª–∞–π—Ç–µ deep-link –ø–æ–¥ –≤–∞—à —Ä–æ—É—Ç
      await bot.sendMessage(
        chatId,
        `–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫–∏: ${url}`
      );
      return;
    }
  } catch (e) {
    console.error("[telegram] callback_query error:", e);
    const chatId = query?.message?.chat?.id;
    if (chatId) {
      await bot.sendMessage(chatId, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});
